// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XDRAW_LINE_HLS_H
#define XDRAW_LINE_HLS_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xdraw_line_hls_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XDraw_line_hls_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XDraw_line_hls;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XDraw_line_hls_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XDraw_line_hls_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XDraw_line_hls_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDraw_line_hls_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XDraw_line_hls_Initialize(XDraw_line_hls *InstancePtr, u16 DeviceId);
XDraw_line_hls_Config* XDraw_line_hls_LookupConfig(u16 DeviceId);
int XDraw_line_hls_CfgInitialize(XDraw_line_hls *InstancePtr, XDraw_line_hls_Config *ConfigPtr);
#else
int XDraw_line_hls_Initialize(XDraw_line_hls *InstancePtr, const char* InstanceName);
int XDraw_line_hls_Release(XDraw_line_hls *InstancePtr);
#endif

void XDraw_line_hls_Start(XDraw_line_hls *InstancePtr);
u32 XDraw_line_hls_IsDone(XDraw_line_hls *InstancePtr);
u32 XDraw_line_hls_IsIdle(XDraw_line_hls *InstancePtr);
u32 XDraw_line_hls_IsReady(XDraw_line_hls *InstancePtr);
void XDraw_line_hls_EnableAutoRestart(XDraw_line_hls *InstancePtr);
void XDraw_line_hls_DisableAutoRestart(XDraw_line_hls *InstancePtr);

void XDraw_line_hls_Set_rows(XDraw_line_hls *InstancePtr, u32 Data);
u32 XDraw_line_hls_Get_rows(XDraw_line_hls *InstancePtr);
void XDraw_line_hls_Set_cols(XDraw_line_hls *InstancePtr, u32 Data);
u32 XDraw_line_hls_Get_cols(XDraw_line_hls *InstancePtr);

void XDraw_line_hls_InterruptGlobalEnable(XDraw_line_hls *InstancePtr);
void XDraw_line_hls_InterruptGlobalDisable(XDraw_line_hls *InstancePtr);
void XDraw_line_hls_InterruptEnable(XDraw_line_hls *InstancePtr, u32 Mask);
void XDraw_line_hls_InterruptDisable(XDraw_line_hls *InstancePtr, u32 Mask);
void XDraw_line_hls_InterruptClear(XDraw_line_hls *InstancePtr, u32 Mask);
u32 XDraw_line_hls_InterruptGetEnabled(XDraw_line_hls *InstancePtr);
u32 XDraw_line_hls_InterruptGetStatus(XDraw_line_hls *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
