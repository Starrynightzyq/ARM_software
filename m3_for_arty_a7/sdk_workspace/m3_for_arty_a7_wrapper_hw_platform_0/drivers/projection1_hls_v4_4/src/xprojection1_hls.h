// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XPROJECTION1_HLS_H
#define XPROJECTION1_HLS_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xprojection1_hls_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XProjection1_hls_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XProjection1_hls;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XProjection1_hls_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XProjection1_hls_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XProjection1_hls_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XProjection1_hls_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XProjection1_hls_Initialize(XProjection1_hls *InstancePtr, u16 DeviceId);
XProjection1_hls_Config* XProjection1_hls_LookupConfig(u16 DeviceId);
int XProjection1_hls_CfgInitialize(XProjection1_hls *InstancePtr, XProjection1_hls_Config *ConfigPtr);
#else
int XProjection1_hls_Initialize(XProjection1_hls *InstancePtr, const char* InstanceName);
int XProjection1_hls_Release(XProjection1_hls *InstancePtr);
#endif

void XProjection1_hls_Start(XProjection1_hls *InstancePtr);
u32 XProjection1_hls_IsDone(XProjection1_hls *InstancePtr);
u32 XProjection1_hls_IsIdle(XProjection1_hls *InstancePtr);
u32 XProjection1_hls_IsReady(XProjection1_hls *InstancePtr);
void XProjection1_hls_EnableAutoRestart(XProjection1_hls *InstancePtr);
void XProjection1_hls_DisableAutoRestart(XProjection1_hls *InstancePtr);

void XProjection1_hls_Set_rows(XProjection1_hls *InstancePtr, u32 Data);
u32 XProjection1_hls_Get_rows(XProjection1_hls *InstancePtr);
void XProjection1_hls_Set_cols(XProjection1_hls *InstancePtr, u32 Data);
u32 XProjection1_hls_Get_cols(XProjection1_hls *InstancePtr);
void XProjection1_hls_Set_threshold_width(XProjection1_hls *InstancePtr, u32 Data);
u32 XProjection1_hls_Get_threshold_width(XProjection1_hls *InstancePtr);
void XProjection1_hls_Set_threshold_height(XProjection1_hls *InstancePtr, u32 Data);
u32 XProjection1_hls_Get_threshold_height(XProjection1_hls *InstancePtr);
void XProjection1_hls_Set_shrink_x_min(XProjection1_hls *InstancePtr, u32 Data);
u32 XProjection1_hls_Get_shrink_x_min(XProjection1_hls *InstancePtr);
void XProjection1_hls_Set_shrink_x_max(XProjection1_hls *InstancePtr, u32 Data);
u32 XProjection1_hls_Get_shrink_x_max(XProjection1_hls *InstancePtr);
void XProjection1_hls_Set_shrink_y_min(XProjection1_hls *InstancePtr, u32 Data);
u32 XProjection1_hls_Get_shrink_y_min(XProjection1_hls *InstancePtr);
void XProjection1_hls_Set_shrink_y_max(XProjection1_hls *InstancePtr, u32 Data);
u32 XProjection1_hls_Get_shrink_y_max(XProjection1_hls *InstancePtr);
void XProjection1_hls_Set_range_min(XProjection1_hls *InstancePtr, u32 Data);
u32 XProjection1_hls_Get_range_min(XProjection1_hls *InstancePtr);

void XProjection1_hls_InterruptGlobalEnable(XProjection1_hls *InstancePtr);
void XProjection1_hls_InterruptGlobalDisable(XProjection1_hls *InstancePtr);
void XProjection1_hls_InterruptEnable(XProjection1_hls *InstancePtr, u32 Mask);
void XProjection1_hls_InterruptDisable(XProjection1_hls *InstancePtr, u32 Mask);
void XProjection1_hls_InterruptClear(XProjection1_hls *InstancePtr, u32 Mask);
u32 XProjection1_hls_InterruptGetEnabled(XProjection1_hls *InstancePtr);
u32 XProjection1_hls_InterruptGetStatus(XProjection1_hls *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
