// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XPROJECTION_MUL_HLS_H
#define XPROJECTION_MUL_HLS_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xprojection_mul_hls_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axilites_BaseAddress;
} XProjection_mul_hls_Config;
#endif

typedef struct {
    u32 Axilites_BaseAddress;
    u32 IsReady;
} XProjection_mul_hls;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XProjection_mul_hls_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XProjection_mul_hls_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XProjection_mul_hls_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XProjection_mul_hls_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XProjection_mul_hls_Initialize(XProjection_mul_hls *InstancePtr, u16 DeviceId);
XProjection_mul_hls_Config* XProjection_mul_hls_LookupConfig(u16 DeviceId);
int XProjection_mul_hls_CfgInitialize(XProjection_mul_hls *InstancePtr, XProjection_mul_hls_Config *ConfigPtr);
#else
int XProjection_mul_hls_Initialize(XProjection_mul_hls *InstancePtr, const char* InstanceName);
int XProjection_mul_hls_Release(XProjection_mul_hls *InstancePtr);
#endif

void XProjection_mul_hls_Start(XProjection_mul_hls *InstancePtr);
u32 XProjection_mul_hls_IsDone(XProjection_mul_hls *InstancePtr);
u32 XProjection_mul_hls_IsIdle(XProjection_mul_hls *InstancePtr);
u32 XProjection_mul_hls_IsReady(XProjection_mul_hls *InstancePtr);
void XProjection_mul_hls_EnableAutoRestart(XProjection_mul_hls *InstancePtr);
void XProjection_mul_hls_DisableAutoRestart(XProjection_mul_hls *InstancePtr);

void XProjection_mul_hls_Set_rows(XProjection_mul_hls *InstancePtr, u32 Data);
u32 XProjection_mul_hls_Get_rows(XProjection_mul_hls *InstancePtr);
void XProjection_mul_hls_Set_cols(XProjection_mul_hls *InstancePtr, u32 Data);
u32 XProjection_mul_hls_Get_cols(XProjection_mul_hls *InstancePtr);
void XProjection_mul_hls_Set_threshold_v(XProjection_mul_hls *InstancePtr, u32 Data);
u32 XProjection_mul_hls_Get_threshold_v(XProjection_mul_hls *InstancePtr);
void XProjection_mul_hls_Set_range_min(XProjection_mul_hls *InstancePtr, u32 Data);
u32 XProjection_mul_hls_Get_range_min(XProjection_mul_hls *InstancePtr);
void XProjection_mul_hls_Set_range_max(XProjection_mul_hls *InstancePtr, u32 Data);
u32 XProjection_mul_hls_Get_range_max(XProjection_mul_hls *InstancePtr);

void XProjection_mul_hls_InterruptGlobalEnable(XProjection_mul_hls *InstancePtr);
void XProjection_mul_hls_InterruptGlobalDisable(XProjection_mul_hls *InstancePtr);
void XProjection_mul_hls_InterruptEnable(XProjection_mul_hls *InstancePtr, u32 Mask);
void XProjection_mul_hls_InterruptDisable(XProjection_mul_hls *InstancePtr, u32 Mask);
void XProjection_mul_hls_InterruptClear(XProjection_mul_hls *InstancePtr, u32 Mask);
u32 XProjection_mul_hls_InterruptGetEnabled(XProjection_mul_hls *InstancePtr);
u32 XProjection_mul_hls_InterruptGetStatus(XProjection_mul_hls *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
